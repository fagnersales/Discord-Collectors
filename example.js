const { SimpleReactionCollector } = require('./index')
const { Client } = require('discord.js')

const client = new Client()

client.on("ready", () => console.log(`Running an example command üòú`))

client.on("message", message => {

    const pongCommand = (author) => {

        // A fun√ß√£o "collected" ser√° invocada sempre qe uma rea√ß√£o for coletada
        // A fun√ß√£o "ignored" ser√° invocada se o usu√°rio n√£o reagir e o tempo acabar
        // A fun√ß√£o "any" ser√° invocada se nenhum dos dois acontecer
      
        // As op√ß√µes s√£o as mesmas de um ReactionCollector, com uma op√ß√£o a mais
        // filterForUser: true
        // Significa que, somente o `author` que √© passado no 3¬∞ parametro ter√° a rea√ß√£o contada!
        // padr√£o: { time: 35000, max: 1, filterForUser: true }

        const collectedFunction = (reaction, user, usedMessage) =>{
            console.log(`[COLLECT] O usu√°rio ${user.username} reagiou com ${reaction.emoji.name} na mensagem: ${usedMessage.content}`)
        }

        SimpleReactionCollector(message.channel.send(`Pong! üèì`), 'üèì', {
            // voc√™ pode inserir sua fun√ß√£o ap√≥s a chave
            collect: collectedFunction, // Sempre que uma rea√ß√£o for coletada

            // ou inserir a fun√ß√£o diretamente aqui 
            limit(collectedReactions, usedMessage) { // Quando atingir o limite de rea√ß√µes imposto nas op√ß√µes 
                console.log(`[LIMIT] ${collectedReactions.size} rea√ß√µes foram coletadas na mensagem: ${usedMessage.content}`)
            },
            // A vantagem de escrever dentro deste objeto, √© que voc√™ ter√° acesso aos parametros que a fun√ß√£o ir√° receber
            end(collectedReactions, reason, usedMessage) {
                console.log(`[END] O coletor terminou pelo motivo: ${reason}! ${collectedReactions.size} rea√ß√µes foram coletadas na mensagem: ${usedMessage.content}`)
            }
        }, 
        { 
            // Ap√≥s o parametro de fun√ß√µes, vem as op√ß√µes, n√£o √© obrigat√≥rio e ela tem todas as op√ß√µes de um reaction collector, com uma diferen√ßa
            // temos a op√ß√£o `filterForUser` que s√≥ ira aceitar rea√ß√µes do autor especificado
            // caso n√£o seja invocada, ela ir√° aceitar rea√ß√£o de qualquer pessoa! (Exceto do Bot)
           filterForUser: author,
           time: 35000, // Por padr√£o √© 35000 (35 segundos em milisegundos)
           max: 3 // por padr√£o √© 1  
        })

    }

    if (message.content.toLowerCase() == "!ping") pongCommand(message.author)

})

client.login('some-crazy-token')